================================
==========  NARL16  ============
================================

NARL16 is a register & stack based 16-bit ISA.

In every instrucion cycle, the instruction at the location of PC is fetched, decoded and executed. Then the PC increments/changes.


Data
====

* NARL16 supports 16 bit signed/unsigned integers, known as a word.
* Signed values are encoded using two's compliment
* Floating point values are represented using IEE754 half precision.
* Memory mapped 64x64 display


Memory
======

NARL16 is capable of addressing 2^16 memory indexes

The following available registers are:
--------------------------------------

* pc sp ir cr r1-12
* program counter, stack pointer, interupt index, cause register, registers 1-12

The memory layout is as follows:
--------------------------------

--------------------------
|  /\ video:  0xF000     |
|------------------------|
|  \/ stack:  0xE000     |
|------------------------|
|  /\ heap:   0x8000     |
|------------------------|
|  /\ Static: 0x7000     |
|------------------------|
|  /\ text:   0x4000     |
|------------------------|
|     System Reserved    |


Instructions
============

* Instructions are all 16 bit values using little endian, the lower 8 bits are stored in a lower address memory than the upper 8
* Each instruction takes up 3 words in memory, the lower for the opcodes, the next 2 higher for immediates

yyyyyxxxxx000000


Lower -> high bits:
* 6 bit opcode
* 5 bit val x => Always processed as the destination
* 5 bit val y => Always processed as the target

x & y can be a specifier for a register, memory address or an immediate value.

The ranges below specify what value range means in the xy position [# means an extra word is required for the x/y value]

*  0-16 maps to registers
*  17 maps to push
*  18 maps to pop
*  19 maps to peek
*# 20 maps to signed immediate
*# 21 maps to unsigned immediate
*# 22 maps to half precision IEE754 floating point
*# 23 maps to memory immediate
*# 24 maps to memory register contents
*# 25 maps to memory stack operation


The next instruction after every instrucion will be a full word immediate value.
(The reason for this is that instructions are always 2-word aligned in memory,
as some instructions need an extra word for immediate and other don't. This makes
implementations of the ISA much easier [althought memory required for programs is 
on average 1.5 x larger])


Opcode table:
-------------

----------------------------------------------------------------------------------------------
| Value | Name | Description                                                                 |
|-------+------+-----------------------------------------------------------------------------|
|  0x0  | NIL  | Currently signifies for the emulator to shut down                           |                    
|-------+------+-----------------------------------------------------------------------------|
|  0x1  | NOP  | Signifies the PC to increment and skip this instruction                     |                    
|-------+------+-----------------------------------------------------------------------------|
|  0x2  | SET  | Sets x to y                                                                 |   
|-------+------+-----------------------------------------------------------------------------|
|  0x3  | ADD  | Sets x to x+y. If there is an overflow set $cr to 0x1 and save PC in stack  |                                                                 
|-------+------+-----------------------------------------------------------------------------|
|  0x4  | SUB  | Sets x to x-y. If there is an underflow set $cr to 0x2 and save PC in stack |        
|-------+------+-----------------------------------------------------------------------------|
|  0x5  | MUL  | Sets x to x*y                                                               |
|-------+------+-----------------------------------------------------------------------------|
|  0x6  | DIV  | Sets x to x/y                                                               |
|-------+------+-----------------------------------------------------------------------------|
|  0x7  | AND  | Sets x to x AND y                                                           |
|-------+------+-----------------------------------------------------------------------------|
|  0x8  | OR   | Sets x to x OR y                                                            |
|-------+------+-----------------------------------------------------------------------------|
|  0x9  | XOR  | Sets x to x XOR y                                                           |
|-------+------+-----------------------------------------------------------------------------|
|  0xA  | NOT  | Sets x to NOT x                                                             |
|-------+------+-----------------------------------------------------------------------------|
|  0xB  | MOD  | Sets x to x mod y                                                           |
|-------+------+-----------------------------------------------------------------------------|
|  0xC  | REM  | Sets x to the remainder of x / y                                            |
|-------+------+-----------------------------------------------------------------------------|
|  0xD  | SRL  | Sets x to x SHIFT RIGHT LOGICAL y                                           |
|-------+------+-----------------------------------------------------------------------------|
|  0xE  | SLL  | Sets x to x SHIFT LEFT LOGCIAL y                                            |
|-------+------+-----------------------------------------------------------------------------|
|  0xF  | SRA  | Sets x to x SHIFT RIGHT ARITHMETIC y                                        |
|-------+------+-----------------------------------------------------------------------------|
|  0x11 | SLA  | Sets x to x SHIFT LEFT ARITHMETIC y                                         |
|-------+------+-----------------------------------------------------------------------------|
|  0x12 | IEQ  | Perform next instruction only if x is equal to y                            |
|-------+------+-----------------------------------------------------------------------------|
|  0x13 | INE  | Perform next instruction only if x is not equal to y                        |
|-------+------+-----------------------------------------------------------------------------|
|  0x14 | IGE  | Perform next instruction only if x is greater than or equal to y            |
|-------+------+-----------------------------------------------------------------------------|
|  0x15 | IGT  | Perform next instruction only if x is greater than y                        |
|-------+------+-----------------------------------------------------------------------------|
|  0x16 | ILT  | Perform next instruction only if x is less than y                           |
|-------+------+-----------------------------------------------------------------------------|
|  0x17 | ILE  | Perform next instruction only if x is less than or equal to y               |
|-------+------+-----------------------------------------------------------------------------|
|  0x18 | IBS  | Perform next instruction only if x and y are both non zero                  |
|-------+------+-----------------------------------------------------------------------------|
|  0x19 | INB  | Perform next instruction only if x and y are not both non zero              |
|-------+------+-----------------------------------------------------------------------------|
|  0x1A | JMP  | Jump to the value in x                                                      |
|-------+------+-----------------------------------------------------------------------------| 
|  0x1B | JAL  | Push PC to stack and jump to the value in x                                 |
|-------+------+-----------------------------------------------------------------------------|  
|  0x1C | RTN  | Pop the stack and set PC to that address                                    |
|-------+------+-----------------------------------------------------------------------------|
|  0x1D | SYS  | System call the function with arguments on the stack                        |
|-------+------+-----------------------------------------------------------------------------|
|  0x1E | INT  | Call an interrupt, push PC then set it to $ia                               |
----------------------------------------------------------------------------------------------


interrupts
==========

Every instruction cycle, the processor checks for interrupts from hardware (or software such as SYS calls).
The CPU will perform a linked jump to the specified Interrupt Service Routine that is found by indexing the ISR table.


Flags
=====

In the case of an error, the flag register $fr should be set to indicate the error.

Error codes:
------------

-------------------------------------------------------
| 0x1 | Overflow  | Indicates an arithmetic overflow  |
|-----+-----------+-----------------------------------|
| 0x2 | Underflow | Indicates an arithmetic underflow |
------+-----------+------------------------------------



Graphics
========

* NARL16 has a memory mapped region for video memory starting at base address 0xF000
* As video memory can support 4096 individual pixels, the maximum resolution size a 
connected monitor can be is [in 4:3 aspect ratio] is 64 x 48